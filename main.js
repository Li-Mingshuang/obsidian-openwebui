/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OpenWebUIPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/types.ts
var DEFAULT_SETTINGS = {
  autoStart: true,
  serverUrl: "http://localhost:8081",
  serverPort: 8081
};

// src/views/OpenWebUIView.ts
var import_obsidian = require("obsidian");
var VIEW_TYPE_OPENWEBUI = "openwebui-view";
var OpenWebUIView = class extends import_obsidian.ItemView {
  constructor(leaf, settings) {
    super(leaf);
    this.settings = settings;
  }
  getViewType() {
    return VIEW_TYPE_OPENWEBUI;
  }
  getDisplayText() {
    return "OpenWebUI";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("openwebui-container");
    this.iframe = container.createEl("iframe");
    this.iframe.addClass("openwebui-frame");
    this.iframe.src = this.settings.serverUrl;
    this.iframe.setAttr("frameborder", "0");
    const style = document.createElement("style");
    style.textContent = `
            .openwebui-container {
                padding: 0;
                width: 100%;
                height: 100%;
            }
            .openwebui-frame {
                width: 100%;
                height: 100%;
                border: none;
                background: var(--background-primary);
            }
        `;
    document.head.appendChild(style);
  }
  async onClose() {
    if (this.iframe) {
      this.iframe.remove();
    }
  }
};

// src/settings.ts
var import_obsidian2 = require("obsidian");
var OpenWebUISettingTab = class extends import_obsidian2.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "OpenWebUI \u8BBE\u7F6E" });
    new import_obsidian2.Setting(containerEl).setName("\u81EA\u52A8\u542F\u52A8").setDesc("\u6253\u5F00 Obsidian \u65F6\u81EA\u52A8\u542F\u52A8 OpenWebUI \u670D\u52A1").addToggle((toggle) => toggle.setValue(this.plugin.settings.autoStart).onChange(async (value) => {
      this.plugin.settings.autoStart = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u670D\u52A1\u5730\u5740").setDesc("OpenWebUI \u670D\u52A1\u7684\u8BBF\u95EE\u5730\u5740").addText((text) => text.setPlaceholder("http://localhost:8081").setValue(this.plugin.settings.serverUrl).onChange(async (value) => {
      this.plugin.settings.serverUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian2.Setting(containerEl).setName("\u670D\u52A1\u7AEF\u53E3").setDesc("OpenWebUI \u670D\u52A1\u7684\u8FD0\u884C\u7AEF\u53E3").addText((text) => text.setPlaceholder("8081").setValue(this.plugin.settings.serverPort.toString()).onChange(async (value) => {
      const port = parseInt(value);
      if (!isNaN(port) && port > 0 && port < 65536) {
        this.plugin.settings.serverPort = port;
        this.plugin.settings.serverUrl = `http://localhost:${port}`;
        await this.plugin.saveSettings();
      }
    }));
  }
};

// src/services/server.ts
var import_child_process = require("child_process");
var import_obsidian3 = require("obsidian");
var ServerManager = class {
  constructor(settings) {
    this.process = null;
    this.settings = settings;
  }
  async isPortInUse(port) {
    return new Promise((resolve) => {
      const netstat = (0, import_child_process.spawn)("lsof", ["-i", `:${port}`]);
      let output = "";
      netstat.stdout.on("data", (data) => {
        output += data.toString();
      });
      netstat.on("close", (code) => {
        resolve(output.length > 0);
      });
    });
  }
  async killExistingProcess() {
    return new Promise((resolve) => {
      const commands = [
        'pkill -f "open-webui serve"',
        `lsof -ti:${this.settings.serverPort} | xargs kill -9`
        // 使用配置的端口
      ];
      const killAll = (0, import_child_process.spawn)("sh", ["-c", commands.join(" && ")]);
      killAll.on("close", () => {
        setTimeout(resolve, 3e3);
      });
    });
  }
  async ensurePortAvailable(port, retries = 3) {
    for (let i = 0; i < retries; i++) {
      const portInUse = await this.isPortInUse(port);
      if (!portInUse) {
        return true;
      }
      console.log(`[OpenWebUI] Port ${port} is in use, attempt ${i + 1} of ${retries} to free it...`);
      await this.killExistingProcess();
      await new Promise((resolve) => setTimeout(resolve, 2e3));
    }
    return false;
  }
  async start() {
    var _a, _b;
    if (this.process) {
      return;
    }
    try {
      const portAvailable = await this.ensurePortAvailable(this.settings.serverPort);
      if (!portAvailable) {
        throw new Error(`\u65E0\u6CD5\u91CA\u653E ${this.settings.serverPort} \u7AEF\u53E3\uFF0C\u8BF7\u68C0\u67E5\u662F\u5426\u6709\u5176\u4ED6\u7A0B\u5E8F\u5360\u7528`);
      }
      console.log("[OpenWebUI] Starting service...");
      const homeDir = process.env.HOME || process.env.USERPROFILE;
      const configDir = `${homeDir}/Library/Application Support/open-webui`;
      const secretKeyPath = `${configDir}/.webui_secret_key`;
      const mkdirp = (0, import_child_process.spawn)("mkdir", ["-p", configDir]);
      await new Promise((resolve) => mkdirp.on("close", resolve));
      const secretKey = Buffer.from(Math.random().toString(36) + Date.now().toString()).toString("base64");
      const writeKey = (0, import_child_process.spawn)("sh", ["-c", `echo "${secretKey}" > "${secretKeyPath}"`]);
      await new Promise((resolve) => writeKey.on("close", resolve));
      const command = "conda";
      const args = [
        "run",
        "-n",
        "base",
        "open-webui",
        "serve",
        "--port",
        this.settings.serverPort.toString(),
        "--host",
        "127.0.0.1"
        // 只监听本地地址
      ];
      console.log(`[OpenWebUI] Running command: ${command} ${args.join(" ")}`);
      console.log(`[OpenWebUI] Using config directory: ${configDir}`);
      this.process = (0, import_child_process.spawn)(command, args, {
        shell: true,
        env: {
          ...process.env,
          HOME: homeDir,
          WEBUI_CONFIG_DIR: configDir,
          WEBUI_SECRET_KEY: secretKey,
          // 直接传递密钥内容
          PATH: `/opt/miniconda3/bin:${process.env.PATH}`,
          CONDA_PREFIX: "/opt/miniconda3",
          CONDA_DEFAULT_ENV: "base",
          TMPDIR: "/tmp"
        },
        stdio: ["inherit", "pipe", "pipe"]
      });
      let isStarted = false;
      let startupLogs = "";
      const startTimeout = setTimeout(() => {
        if (!isStarted) {
          console.log("[OpenWebUI] Service startup timeout");
          console.log("[OpenWebUI] Startup logs:", startupLogs);
          new import_obsidian3.Notice("OpenWebUI \u670D\u52A1\u542F\u52A8\u8D85\u65F6\uFF0C\u8BF7\u68C0\u67E5\u65E5\u5FD7");
        }
      }, 3e4);
      (_a = this.process.stdout) == null ? void 0 : _a.on("data", (data) => {
        const output = data.toString();
        startupLogs += output + "\n";
        console.log(`[OpenWebUI] stdout: ${output}`);
        if (output.includes("Application startup complete")) {
          isStarted = true;
          clearTimeout(startTimeout);
          new import_obsidian3.Notice("OpenWebUI \u670D\u52A1\u5DF2\u542F\u52A8");
        }
        if (output.includes("address already in use")) {
          console.log("[OpenWebUI] Port is already in use, will try to restart...");
          this.stop().then(() => this.start());
        }
      });
      (_b = this.process.stderr) == null ? void 0 : _b.on("data", (data) => {
        const error = data.toString();
        startupLogs += `[stderr] ${error}
`;
        console.error(`[OpenWebUI] stderr: ${error}`);
        if (error.includes("address already in use")) {
          console.log("[OpenWebUI] Port is already in use, will try to restart...");
          this.stop().then(() => this.start());
        }
      });
      this.process.on("error", (err) => {
        clearTimeout(startTimeout);
        const errorMessage = `\u542F\u52A8\u5931\u8D25: ${err.message}
\u8BE6\u7EC6\u4FE1\u606F: ${err.stack || "\u65E0\u5806\u6808\u4FE1\u606F"}
\u542F\u52A8\u65E5\u5FD7:
${startupLogs}`;
        new import_obsidian3.Notice(`OpenWebUI ${errorMessage}`);
        console.error("[OpenWebUI] Failed to start:", errorMessage);
        this.process = null;
      });
      this.process.on("exit", (code, signal) => {
        clearTimeout(startTimeout);
        const exitInfo = `\u8FDB\u7A0B\u9000\u51FA - \u4EE3\u7801: ${code}, \u4FE1\u53F7: ${signal}
\u542F\u52A8\u65E5\u5FD7:
${startupLogs}`;
        if (code !== 0) {
          new import_obsidian3.Notice(`OpenWebUI ${exitInfo}`);
        }
        console.log(`[OpenWebUI] ${exitInfo}`);
        this.process = null;
      });
      const checkInterval = setInterval(async () => {
        if (isStarted) {
          clearInterval(checkInterval);
          return;
        }
        try {
          const response = await fetch(`http://127.0.0.1:${this.settings.serverPort}/health`);
          if (response.ok) {
            isStarted = true;
            clearTimeout(startTimeout);
            clearInterval(checkInterval);
            new import_obsidian3.Notice("OpenWebUI \u670D\u52A1\u5DF2\u542F\u52A8");
          }
        } catch (e) {
        }
      }, 1e3);
    } catch (error) {
      const errorMessage = error instanceof Error ? `${error.message}
${error.stack || ""}` : String(error);
      new import_obsidian3.Notice(`\u542F\u52A8 OpenWebUI \u5931\u8D25: ${errorMessage}`);
      console.error("[OpenWebUI] Failed to start:", errorMessage);
      this.process = null;
    }
  }
  async stop() {
    if (!this.process || typeof this.process.pid !== "number") {
      return;
    }
    try {
      console.log("[OpenWebUI] Stopping service...");
      this.process.kill("SIGTERM");
      await this.killExistingProcess();
      this.process = null;
      new import_obsidian3.Notice("OpenWebUI \u670D\u52A1\u5DF2\u505C\u6B62");
    } catch (error) {
      const errorMessage = error instanceof Error ? `${error.message}
${error.stack || ""}` : String(error);
      new import_obsidian3.Notice(`\u505C\u6B62 OpenWebUI \u5931\u8D25: ${errorMessage}`);
      console.error("[OpenWebUI] Failed to stop:", errorMessage);
    }
  }
  isRunning() {
    return this.process !== null;
  }
};

// src/main.ts
var OpenWebUIPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    this.server = new ServerManager(this.settings);
    this.registerView(
      VIEW_TYPE_OPENWEBUI,
      (leaf) => new OpenWebUIView(leaf, this.settings)
    );
    this.addRibbonIcon("message-square", "OpenWebUI", () => {
      this.activateView();
    });
    this.addSettingTab(new OpenWebUISettingTab(this.app, this));
    if (this.settings.autoStart) {
      await this.server.start();
    }
    this.addCommand({
      id: "toggle-openwebui",
      name: "\u5207\u6362 OpenWebUI \u89C6\u56FE",
      callback: () => {
        this.activateView();
      }
    });
    this.addCommand({
      id: "start-openwebui",
      name: "\u542F\u52A8 OpenWebUI \u670D\u52A1",
      callback: async () => {
        await this.server.start();
      }
    });
    this.addCommand({
      id: "stop-openwebui",
      name: "\u505C\u6B62 OpenWebUI \u670D\u52A1",
      callback: async () => {
        await this.server.stop();
      }
    });
  }
  async onunload() {
    await this.server.stop();
    this.app.workspace.detachLeavesOfType(VIEW_TYPE_OPENWEBUI);
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async activateView() {
    const workspace = this.app.workspace;
    let leaf = workspace.getLeavesOfType(VIEW_TYPE_OPENWEBUI)[0];
    if (!leaf) {
      leaf = workspace.getRightLeaf(false);
      await leaf.setViewState({
        type: VIEW_TYPE_OPENWEBUI,
        active: true
      });
    }
    workspace.revealLeaf(leaf);
  }
};
